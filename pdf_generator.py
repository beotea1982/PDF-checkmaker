#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
PDF Generator Script
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV –¥–∞–Ω–Ω—ã—Ö –∏ HTML-—à–∞–±–ª–æ–Ω–æ–≤
"""

import os
import sys
import pandas as pd
import platform
from pathlib import Path
from string import Template

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if platform.system() == 'Windows':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è GTK+ –∏ GLib
    os.environ['G_MESSAGES_DEBUG'] = '0'
    import warnings
    warnings.filterwarnings('ignore', category=UserWarning)
    warnings.filterwarnings('ignore', category=RuntimeWarning)

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WeasyPrint, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
USE_WEASYPRINT = False
USE_XHTML2PDF = False
pisa = None

try:
    from weasyprint import HTML, CSS
    from weasyprint.text.fonts import FontConfiguration
    USE_WEASYPRINT = True
except (ImportError, OSError) as e:
    USE_WEASYPRINT = False
    print(f"‚ö†Ô∏è  WeasyPrint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print("üìå –ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É...")
    try:
        from xhtml2pdf import pisa
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é xhtml2pdf")
        USE_XHTML2PDF = True
    except ImportError:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞")
        USE_XHTML2PDF = False
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫:")
        print("   pip install xhtml2pdf")
        print("   –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GTK+ –¥–ª—è WeasyPrint")
        sys.exit(1)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
DATA_DIR = Path('data')
TEMPLATES_DIR = Path('templates')
OUTPUT_DIR = Path('output')


def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
    if platform.system() == 'Windows':
        os.system('cls')
    else:
        os.system('clear')


def print_menu_header(title):
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é"""
    print("\n" + "=" * 60)
    print(f"  {title}")
    print("=" * 60)


def print_menu(items):
    """–í—ã–≤–æ–¥–∏—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    for i, item in enumerate(items, 1):
        print(f"  {i}. {item}")
    print()


def get_choice(prompt, max_value):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    while True:
        try:
            choice = input(prompt)
            choice_num = int(choice)
            if 1 <= choice_num <= max_value:
                return choice_num
            else:
                print(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_value}")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)


def get_csv_files():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ CSV —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data"""
    csv_files = list(DATA_DIR.glob('*.csv'))
    if not csv_files:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'data'")
        sys.exit(1)
    return csv_files


def get_html_templates():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ HTML-—à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ templates"""
    html_files = list(TEMPLATES_DIR.glob('*.html'))
    if not html_files:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ HTML-—à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'templates'")
        sys.exit(1)
    return html_files


def load_csv_data(csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_csv(csv_path, encoding='utf-8')
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {csv_path}: {e}")
        return None


def read_html_template(template_path):
    """–ß–∏—Ç–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω"""
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_path}: {e}")
        return None


def render_act_template(template_html, positions_df):
    """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –∞–∫—Ç–∞"""
    if len(positions_df) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞")
        return None
    
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    first_row = positions_df.iloc[0]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    positions_rows = ""
    total_amount = 0
    
    for idx, row in enumerate(positions_df.itertuples(), 1):
        try:
            total = float(row.total)
            total_amount += total
        except:
            total = 0
        
        positions_rows += f"""
      <tr>
        <td>{idx}</td>
        <td>{row.work_name}</td>
        <td>{row.quantity}</td>
        <td>{row.unit}</td>
        <td>{row.unit_price}</td>
        <td>{row.total}</td>
      </tr>"""
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    template = Template(template_html)
    html = template.safe_substitute(
        act_number=first_row.act_number,
        act_date=first_row.act_date,
        contract_number=first_row.contract_number,
        object_address=first_row.object_address,
        positions_rows=positions_rows,
        total_amount=f"{total_amount:.2f}",
        client=first_row.client,
        contractor=first_row.contractor
    )
    
    return html


def render_certificate_template(template_html, data_row):
    """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    template = Template(template_html)
    html = template.safe_substitute(
        student_name=data_row.student_name,
        course_name=data_row.course_name,
        cert_date=data_row.cert_date
    )
    return html


def render_template(template_path, template_html, data_df, selected_id):
    """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ ID
    filtered_df = data_df[data_df['id'] == selected_id]
    
    if len(filtered_df) == 0:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {selected_id}")
        return None
    
    template_name = template_path.stem
    
    if template_name == 'act':
        # –î–ª—è –∞–∫—Ç–æ–≤: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º ID
        return render_act_template(template_html, filtered_df)
    elif template_name == 'certificate':
        # –î–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        return render_certificate_template(template_html, filtered_df.iloc[0])
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞: {template_name}")
        return None


def generate_pdf(html_content, output_path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –∏–∑ HTML"""
    try:
        if USE_WEASYPRINT:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º WeasyPrint
            font_config = FontConfiguration()
            HTML(string=html_content).write_pdf(
                output_path,
                font_config=font_config
            )
        elif USE_XHTML2PDF:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º xhtml2pdf
            with open(output_path, 'wb') as result_file:
                pdf = pisa.CreatePDF(
                    html_content,
                    dest=result_file,
                    encoding='utf-8'
                )
            if pdf.err:
                raise Exception(f"–û—à–∏–±–∫–∞ xhtml2pdf: {pdf.err}")
        else:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
        
        print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return False


def open_pdf(pdf_path):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDF –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    try:
        if platform.system() == 'Windows':
            os.startfile(pdf_path)
        elif platform.system() == 'Darwin':  # macOS
            os.system(f'open "{pdf_path}"')
        else:  # Linux
            os.system(f'xdg-open "{pdf_path}"')
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    clear_screen()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for directory in [DATA_DIR, TEMPLATES_DIR, OUTPUT_DIR]:
        if not directory.exists():
            directory.mkdir(exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    print("\nüîß PDF –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –ó–∞–ø—É—Å–∫\n")
    
    # –®–ê–ì 1: –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
    html_templates = get_html_templates()
    print_menu_header("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ HTML-—à–∞–±–ª–æ–Ω—ã")
    template_filenames = [f.name for f in html_templates]
    print_menu(template_filenames)
    
    template_choice = get_choice(f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (1-{len(html_templates)}): ", len(html_templates))
    selected_template = html_templates[template_choice - 1]
    
    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    print(f"\nüìù –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ {selected_template.name}...")
    template_html = read_html_template(selected_template)
    if template_html is None:
        return
    
    # –®–ê–ì 2: –í—ã–±–∏—Ä–∞–µ–º CSV —Ñ–∞–π–ª
    csv_files = get_csv_files()
    print_menu_header("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    csv_filenames = [f.name for f in csv_files]
    print_menu(csv_filenames)
    
    csv_choice = get_choice(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (1-{len(csv_files)}): ", len(csv_files))
    selected_csv = csv_files[csv_choice - 1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {selected_csv.name}...")
    data_df = load_csv_data(selected_csv)
    if data_df is None:
        return
    
    # –®–ê–ì 3: –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print_menu_header("üî¢ –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print_menu([
        "–°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω PDF –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ID",
        "–°–æ–∑–¥–∞—Ç—å PDF –¥–ª—è –≤—Å–µ—Ö ID –≤ —Ñ–∞–π–ª–µ"
    ])
    
    mode_choice = get_choice("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-2): ", 2)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
    unique_ids = sorted(data_df['id'].unique())
    
    if mode_choice == 1:
        # –†–µ–∂–∏–º 1: –û–¥–∏–Ω PDF
        print_menu_header(f"üî¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ —Ñ–∞–π–ª–µ {selected_csv.name}")
        print_menu([f"ID: {id_val} ({len(data_df[data_df['id'] == id_val])} –∑–∞–ø–∏—Å–µ–π)" for id_val in unique_ids])
        
        id_choice = get_choice(f"–í—ã–±–µ—Ä–∏—Ç–µ ID (1-{len(unique_ids)}): ", len(unique_ids))
        selected_id = unique_ids[id_choice - 1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω PDF
        print(f"\nüî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è ID {selected_id}...")
        rendered_html = render_template(selected_template, template_html, data_df, selected_id)
        if rendered_html is None:
            return
        
        output_filename = f"{selected_template.stem}_{selected_csv.stem}_id{selected_id}.pdf"
        output_path = OUTPUT_DIR / output_filename
        
        if generate_pdf(rendered_html, output_path):
            print("\nüöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ PDF —Ñ–∞–π–ª–∞...")
            open_pdf(output_path)
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç: {output_filename}")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.")
    
    else:
        # –†–µ–∂–∏–º 2: –ù–µ—Å–∫–æ–ª—å–∫–æ PDF
        print(f"\nüî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –≤—Å–µ—Ö ID...")
        print(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {len(unique_ids)} —Ñ–∞–π–ª–æ–≤\n")
        
        created_files = []
        errors = []
        
        for idx, selected_id in enumerate(unique_ids, 1):
            print(f"  [{idx}/{len(unique_ids)}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID {selected_id}...", end=" ")
            
            rendered_html = render_template(selected_template, template_html, data_df, selected_id)
            if rendered_html is None:
                errors.append(f"ID {selected_id}")
                print("‚ùå")
                continue
            
            output_filename = f"{selected_template.stem}_{selected_csv.stem}_id{selected_id}.pdf"
            output_path = OUTPUT_DIR / output_filename
            
            if generate_pdf(rendered_html, output_path):
                created_files.append(output_filename)
                print("‚úÖ")
            else:
                errors.append(f"ID {selected_id}")
                print("‚ùå")
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
        if created_files:
            print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for fname in created_files:
                print(f"   ‚Ä¢ {fname}")
        
        if errors:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(errors)} —Ñ–∞–π–ª–æ–≤: {', '.join(errors)}")
        
        print(f"\nüìÇ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: output/")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

